{{- if or (eq "true" (include "stackgres.operator.resetCerts" .)) (eq "true" (include "stackgres.operator.upgradeCrds" .)) }}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-wait"
  namespace: {{ .Release.Namespace }}
  labels:
    app: stackgres-operator
    scope: cleanup
    job: wait
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "100"
    {{- with .Values.jobs.annotations }}
    {{ toYaml . | nindent 4 }}
    {{- end }}
spec:
  template:
    metadata:
      labels:
        app: stackgres-operator
        scope: cleanup
        job: wait
    spec:
      {{- with .Values.jobs.affinity}}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end}}
      {{- with .Values.jobs.nodeSelector}}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ .Release.Name }}-init
      restartPolicy: OnFailure
      terminationGracePeriodSeconds: 0
      {{- with .Values.jobs.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- if or (not (.Capabilities.APIVersions.Has "project.openshift.io/v1")) .Values.developer.disableArbitraryUser }}
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        {{- end }}
      containers:
      - name: "{{ .Release.Name }}-wait"
        image: {{ template "kubectl.image" . }}
        imagePullPolicy: "IfNotPresent"
        command:
          - "/bin/bash"
          - "-ecx"
          - |
            kubectl set env -n '{{ .Release.Namespace }}' 'deployment/{{ .Release.Name }}' DISABLE_RECONCILIATION-
            kubectl scale --timeout 1h --replicas 1 -n '{{ .Release.Namespace }}' 'deployment/{{ .Release.Name }}'
            {{- if and .Values.deploy.restapi }}
            kubectl scale --timeout 1h --replicas 1 -n '{{ .Release.Namespace }}' 'deployment/{{ .Values.restapi.name }}'
            {{- end }}
            kubectl rollout status -n '{{ .Release.Namespace }}' 'deployment/{{ .Release.Name }}'
            {{- if and .Values.deploy.restapi }}
            kubectl rollout status -n '{{ .Release.Namespace }}' 'deployment/{{ .Values.restapi.name }}'
            {{- end }}
            {{- if .Values.extensions.cache.enabled }}
            kubectl rollout status -n '{{ .Release.Namespace }}' 'statefulset/{{ .Release.Name }}-extensions-cache'
            {{- end }}
{{- end }}